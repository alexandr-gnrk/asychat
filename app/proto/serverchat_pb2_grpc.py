# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import serverchat_pb2 as serverchat__pb2


class ServerChatStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.connect = channel.unary_unary(
                '/serverchat.ServerChat/connect',
                request_serializer=serverchat__pb2.ConnectionRequest.SerializeToString,
                response_deserializer=serverchat__pb2.ConnectionResponse.FromString,
                )
        self.disconnect = channel.unary_unary(
                '/serverchat.ServerChat/disconnect',
                request_serializer=serverchat__pb2.DisconnectionRequest.SerializeToString,
                response_deserializer=serverchat__pb2.Status.FromString,
                )
        self.send_message = channel.unary_unary(
                '/serverchat.ServerChat/send_message',
                request_serializer=serverchat__pb2.Message.SerializeToString,
                response_deserializer=serverchat__pb2.Status.FromString,
                )
        self.get_chat_stream = channel.unary_stream(
                '/serverchat.ServerChat/get_chat_stream',
                request_serializer=serverchat__pb2.Empty.SerializeToString,
                response_deserializer=serverchat__pb2.Action.FromString,
                )


class ServerChatServicer(object):
    """Missing associated documentation comment in .proto file."""

    def connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def disconnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_message(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_chat_stream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerChatServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'connect': grpc.unary_unary_rpc_method_handler(
                    servicer.connect,
                    request_deserializer=serverchat__pb2.ConnectionRequest.FromString,
                    response_serializer=serverchat__pb2.ConnectionResponse.SerializeToString,
            ),
            'disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.disconnect,
                    request_deserializer=serverchat__pb2.DisconnectionRequest.FromString,
                    response_serializer=serverchat__pb2.Status.SerializeToString,
            ),
            'send_message': grpc.unary_unary_rpc_method_handler(
                    servicer.send_message,
                    request_deserializer=serverchat__pb2.Message.FromString,
                    response_serializer=serverchat__pb2.Status.SerializeToString,
            ),
            'get_chat_stream': grpc.unary_stream_rpc_method_handler(
                    servicer.get_chat_stream,
                    request_deserializer=serverchat__pb2.Empty.FromString,
                    response_serializer=serverchat__pb2.Action.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'serverchat.ServerChat', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServerChat(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serverchat.ServerChat/connect',
            serverchat__pb2.ConnectionRequest.SerializeToString,
            serverchat__pb2.ConnectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serverchat.ServerChat/disconnect',
            serverchat__pb2.DisconnectionRequest.SerializeToString,
            serverchat__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_message(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serverchat.ServerChat/send_message',
            serverchat__pb2.Message.SerializeToString,
            serverchat__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_chat_stream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/serverchat.ServerChat/get_chat_stream',
            serverchat__pb2.Empty.SerializeToString,
            serverchat__pb2.Action.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
